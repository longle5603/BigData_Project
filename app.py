import streamlit as st
import pandas as pd
import numpy as np
import pickle
from pyspark.ml.feature import VectorAssembler
from pyspark.sql import SparkSession
from pyspark.ml.regression import LinearRegressionModel

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="D·ª± ƒêo√°n Gi√° Nh√†",
    page_icon="üè†",
    layout="wide"
)

# Kh·ªüi t·∫°o Spark session
@st.cache_resource
def get_spark():
    return SparkSession.builder \
        .appName("HousePricePrediction") \
        .config("spark.driver.memory", "2g") \
        .getOrCreate()

# H√†m t·∫£i th√¥ng tin m√¥ h√¨nh
@st.cache_resource
def load_model_info():
    try:
        model_path = "models/house_price_model.pkl"
        with open(model_path, "rb") as f:
            model_info = pickle.load(f)
        return model_info
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i th√¥ng tin m√¥ h√¨nh: {e}")
        return None
    
# H√†m d·ª± ƒëo√°n gi√° s·ª≠ d·ª•ng h·ªá s·ªë tr·ª±c ti·∫øp
def predict_price(bhk, total_sqft, bath, balcony):
    try:
        # T·∫£i th√¥ng tin m√¥ h√¨nh
        model_info = load_model_info()
        
        if model_info is None:
            st.warning("Kh√¥ng t√¨m th·∫•y th√¥ng tin m√¥ h√¨nh, s·ª≠ d·ª•ng gi√° tr·ªã m·∫´u")
            # Gi√° tr·ªã m·∫´u - thay th·∫ø b·∫±ng h·ªá s·ªë th·ª±c t·∫ø n·∫øu bi·∫øt
            coefficients = [5.0, 0.1, 15.0, 3.0]
            intercept = 10.0
        else:
            coefficients = model_info["coefficients"]
            intercept = model_info["intercept"]
        
        # T·∫°o vector ƒë·∫∑c tr∆∞ng
        features = [float(bhk), float(total_sqft), float(bath), float(balcony)]
        
        # T√≠nh to√°n d·ª± ƒëo√°n
        prediction = sum(coef * feat for coef, feat in zip(coefficients, features)) + intercept
        
        return prediction
    
    except Exception as e:
        st.error(f"L·ªói trong qu√° tr√¨nh d·ª± ƒëo√°n: {e}")
        return None

# Hi·ªÉn th·ªã th√¥ng tin m√¥ h√¨nh
def show_model_info():
    model_info = load_model_info()
    if model_info:
        st.write("**Th√¥ng s·ªë m√¥ h√¨nh:**")
        st.write(f"- S·ªë l·∫ßn l·∫∑p t·ªëi ƒëa: {model_info.get('max_iter', 'Kh√¥ng c√≥ th√¥ng tin')}")
        st.write(f"- Tham s·ªë ƒëi·ªÅu ch·ªânh: {model_info.get('reg_param', 'Kh√¥ng c√≥ th√¥ng tin')}")
        st.write(f"- Tham s·ªë elastic net: {model_info.get('elastic_net_param', 'Kh√¥ng c√≥ th√¥ng tin')}")
        
        # Hi·ªÉn th·ªã h·ªá s·ªë c·ªßa c√°c ƒë·∫∑c tr∆∞ng
        features = model_info.get("features", ["BHK", "total_sqft", "bath", "balcony"])
        coefficients = model_info.get("coefficients", [0, 0, 0, 0])
        
        coef_data = {
            "ƒê·∫∑c tr∆∞ng": features,
            "H·ªá s·ªë": coefficients
        }
        
        st.write("**H·ªá s·ªë c·ªßa c√°c ƒë·∫∑c tr∆∞ng:**")
        st.dataframe(pd.DataFrame(coef_data))
        
        st.write(f"**H·∫±ng s·ªë (Intercept):** {model_info.get('intercept', 'Kh√¥ng c√≥ th√¥ng tin')}")
    else:
        st.warning("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin m√¥ h√¨nh")

# Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng
st.title("üè† ·ª®ng D·ª•ng D·ª± ƒêo√°n Gi√° Nh√†")
st.write("Nh·∫≠p th√¥ng tin cƒÉn h·ªô ƒë·ªÉ nh·∫≠n d·ª± ƒëo√°n gi√°")

# T·∫°o tabs
tab1, tab2 = st.tabs(["Nh·∫≠p li·ªáu", "Th√¥ng tin m√¥ h√¨nh"])

with tab1:
    # T·∫°o layout c·ªôt
    col1, col2 = st.columns(2)
    
    with col1:
        # C√°c tr∆∞·ªùng ƒë·∫ßu v√†o
        bhk = st.number_input("S·ªë ph√≤ng ng·ªß (BHK)", 
                             min_value=1, 
                             max_value=5, 
                             value=2,
                             help="S·ªë ph√≤ng ng·ªß c·ªßa cƒÉn h·ªô")
        
        total_sqft = st.number_input("Di·ªán t√≠ch (sqft)", 
                                    min_value=300.0, 
                                    max_value=10000.0, 
                                    value=1000.0, 
                                    step=50.0,
                                    help="T·ªïng di·ªán t√≠ch cƒÉn h·ªô t√≠nh b·∫±ng feet vu√¥ng")
    
    with col2:
        bath = st.number_input("S·ªë ph√≤ng t·∫Øm", 
                              min_value=1, 
                              max_value=5, 
                              value=2,
                              help="S·ªë ph√≤ng t·∫Øm trong cƒÉn h·ªô")
        
        balcony = st.number_input("S·ªë ban c√¥ng", 
                                 min_value=0, 
                                 max_value=4, 
                                 value=1,
                                 help="S·ªë ban c√¥ng c·ªßa cƒÉn h·ªô")
    
    # N√∫t d·ª± ƒëo√°n
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        predict_button = st.button("D·ª± ƒêo√°n Gi√°", use_container_width=True)
    
    # X·ª≠ l√Ω khi nh·∫•n n√∫t d·ª± ƒëo√°n
    if predict_button:
        with st.spinner("ƒêang t√≠nh to√°n..."):
            price = predict_price(bhk, total_sqft, bath, balcony)
            
            if price is not None:
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.success(f"Gi√° d·ª± ƒëo√°n: {price:,.2f} (ƒë∆°n v·ªã: tri·ªáu)")
                
                # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                st.subheader("Chi ti·∫øt cƒÉn h·ªô")
                details = {
                    "ƒê·∫∑c ƒëi·ªÉm": ["S·ªë ph√≤ng ng·ªß (BHK)", "Di·ªán t√≠ch (sqft)", "S·ªë ph√≤ng t·∫Øm", "S·ªë ban c√¥ng"],
                    "Gi√° tr·ªã": [bhk, total_sqft, bath, balcony]
                }
                st.dataframe(pd.DataFrame(details))
                
                # Bi·ªÉu ƒë·ªì t·∫ßm quan tr·ªçng c·ªßa c√°c ƒë·∫∑c tr∆∞ng
                st.subheader("T·∫ßm quan tr·ªçng c·ªßa c√°c ƒë·∫∑c tr∆∞ng")
                
                # L·∫•y h·ªá s·ªë t·ª´ m√¥ h√¨nh
                model_info = load_model_info()
                if model_info is not None and "coefficients" in model_info:
                    importances = [abs(x) for x in model_info["coefficients"]]
                    features = model_info.get("features", ["BHK", "Di·ªán t√≠ch", "Ph√≤ng t·∫Øm", "Ban c√¥ng"])
                else:
                    # Gi√° tr·ªã m·∫´u n·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin
                    importances = [5.0, 0.1, 15.0, 3.0]
                    features = ["BHK", "Di·ªán t√≠ch", "Ph√≤ng t·∫Øm", "Ban c√¥ng"]
                
                # T·∫°o DataFrame cho bi·ªÉu ƒë·ªì
                importance_df = pd.DataFrame({
                    'ƒê·∫∑c tr∆∞ng': features,
                    'M·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng': importances
                })
                
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
                st.bar_chart(importance_df.set_index('ƒê·∫∑c tr∆∞ng'))
            else:
                st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n gi√°. Vui l√≤ng ki·ªÉm tra l·∫°i gi√° tr·ªã ƒë·∫ßu v√†o.")

with tab2:
    st.subheader("Th√¥ng tin v·ªÅ m√¥ h√¨nh")
    show_model_info()
    
    # Hi·ªÉn th·ªã m·∫´u d·ªØ li·ªáu
    st.subheader("M·∫´u d·ªØ li·ªáu hu·∫•n luy·ªán")
    
    # T·∫°o d·ªØ li·ªáu m·∫´u - thay th·∫ø b·∫±ng d·ªØ li·ªáu th·∫≠t n·∫øu c√≥ th·ªÉ
    sample_data = {
        "BHK": [1, 1, 1, 2, 3, 4],
        "total_sqft": [435.0, 550.0, 440.0, 1077.0, 2065.0, 2825.0],
        "bath": [1, 1, 1, 2, 4, 4],
        "balcony": [1, 1, 0, 2, 1, 3],
        "price": [19.5, 27.0, 28.0, 93.0, 210.0, 250.0]
    }
    
    st.dataframe(pd.DataFrame(sample_data))

# Th√™m th√¥ng tin sidebar
st.sidebar.title("Gi·ªõi thi·ªáu")
st.sidebar.info("""
·ª®ng d·ª•ng n√†y d·ª± ƒëo√°n gi√° nh√† d·ª±a tr√™n c√°c tham s·ªë nh∆∞ s·ªë ph√≤ng ng·ªß (BHK), 
di·ªán t√≠ch t·ªïng (sqft), s·ªë ph√≤ng t·∫Øm v√† s·ªë ban c√¥ng.

D·ª± ƒëo√°n ƒë∆∞·ª£c th·ª±c hi·ªán d·ª±a tr√™n m√¥ h√¨nh H·ªìi quy tuy·∫øn t√≠nh
v·ªõi c√°c h·ªá s·ªë ƒë∆∞·ª£c l∆∞u tr·ªØ t·ª´ qu√° tr√¨nh hu·∫•n luy·ªán.
""")

# Th√™m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
st.sidebar.title("H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
st.sidebar.write("""
1. Nh·∫≠p c√°c th√¥ng s·ªë c·ªßa cƒÉn h·ªô v√†o bi·ªÉu m·∫´u
2. Nh·∫•n n√∫t "D·ª± ƒêo√°n Gi√°"
3. K·∫øt qu·∫£ s·∫Ω hi·ªÉn th·ªã c√πng v·ªõi bi·ªÉu ƒë·ªì ph√¢n t√≠ch
""")

# Th√™m th√¥ng tin li√™n h·ªá
st.sidebar.title("Li√™n h·ªá")
st.sidebar.write("Email: email@example.com")